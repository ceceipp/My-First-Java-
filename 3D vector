import java.awt.*;
import javax.swing.*;
import java.util.*;
 
public class MyFirstJavaDone3D extends JFrame
{
		
    public MyFirstJavaDone3D()
	{
            this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            this.setTitle("MyFirstJava Test");
            this.setResizable(true);
            this.setBounds(0,0,900,900);
            this.setVisible(true); 
            
            
	}
	double x,y,z,xx,yy,zz = 0;
        int ample = 0 ;
        boolean flag1 ,flag2, flag3, flag4  = false;
	public void paint(Graphics g)
            {   
                super.paint(g);
                g.setColor(Color.black);
		g.drawLine(0,400,800,400);
		g.drawLine(400,0,400,800);
		g.drawLine(0,800,800,0);
                g.drawString("0", 380,430);
                g.drawString("x", 780,380);
                g.drawString("z", 820,40);
                g.drawString("y", 430,40);
                if( flag1 == true )
                {
                    g.setColor(Color.green);
                    g.drawLine(0+400,0+400,400 + (int)Math.round(x + y *0.707) ,400 - (int)Math.round(y*0.707 + z) );
                    g.setColor(Color.red);
                    g.drawLine(0+400,0+400,400 + (int)Math.round(xx + yy*0.707) ,400 - (int)Math.round(yy*0.707+zz) ); 
                    flag1 = false ;
                }
                if( flag3 == true)
                    {
                        g.setColor(Color.red);
                        g.drawString("( "+xx , 400 + (int)Math.round(xx + yy*0.707) + 10 ,400 - (int)Math.round(yy*0.707+zz) + 10);
                        g.drawString(" , "+yy , 400 + (int)Math.round(xx + yy*0.707) + 50 ,400 - (int)Math.round(yy*0.707+zz) + 10);
                        g.drawString(" , "+zz , 400 + (int)Math.round(xx + yy*0.707) + 90 ,400 - (int)Math.round(yy*0.707+zz) + 10);
                        g.drawString(" ) " , 400 + (int)Math.round(xx + yy*0.707) + 130 ,400 - (int)Math.round(yy*0.707+zz) + 10);
                        flag3 = false ;
                    }
                if( flag4 == true )
                    {
                        g.setColor(Color.red);
                        g.drawString("( "+xx , 400 + (int)Math.round(xx + yy*0.707)*ample + 10 ,400 - (int)Math.round(yy*0.707+zz)*ample + 10);
                        g.drawString(" , "+yy , 400 + (int)Math.round(xx + yy*0.707)*ample + 50 ,400 - (int)Math.round(yy*0.707+zz)*ample + 10);
                        g.drawString(" , "+zz , 400 + (int)Math.round(xx + yy*0.707)*ample + 90 ,400 - (int)Math.round(yy*0.707+zz)*ample + 10);
                        g.drawString(" ) " , 400 + (int)Math.round(xx + yy*0.707)*ample + 130 ,400 - (int)Math.round(yy*0.707+zz)*ample + 10);
                        flag4 = false ;
                    }
                if( flag2 == true )
                {
                    g.setColor(Color.green);
                    g.drawLine(0+400,0+400,400 + (int)Math.round(x + y*0.707 )*ample ,400 - (int)Math.round(y*0.70+z)*ample );
                    g.setColor(Color.red);
                    g.drawLine(0+400,0+400,400 + (int)Math.round(xx + yy * 0.707 )*ample ,400 - (int)Math.round(yy * 0.707 +zz )*ample );
                    flag2 = false ;
                    
                } 
            }
	
	public void point(Graphics g,int i , int j,Color c )
            {	
                g.setColor(c);
                g.drawLine(i,j,i,j);
            }
	public static void main(String[] args)
	{	
		int i,j,k,l;
		
		Double a[ ][ ] = new Double[3][3];
		Scanner sc = new Scanner(System.in);
		MyFirstJavaDone3D kaka = new MyFirstJavaDone3D();
		Graphics g = kaka.getGraphics();
                kaka.paint(g); 
                kaka.flag1 = kaka.flag2 = false ;
                kaka.repaint();
		//g.clearRect(0,0,900,900);   //清屏
		System.out.print("输入向量a (x y z)  (绿色的向量)");
		kaka.x = sc.nextDouble() ; 
                kaka.y = sc.nextDouble() ;	//获取向量坐标
		kaka.z = sc.nextDouble() ;
		
                kaka.flag1 = true ;
                kaka.repaint();     //画出向量
				
		System.out.print("输入矩阵A ");
			for(i=0;i<3;i++)
                            for(j=0;j<3;j++)
				{
                                    a[i][j] = sc.nextDouble();		//获取变换矩阵
				}
				System.out.print("\n\n 矩阵A\n");
				for(i=0;i<3;i++)
					{
						for(j=0;j<3;j++)
						{
							System.out.print("  "+a[i][j]);	//显示变换矩阵
						}
						System.out.print("\n");
					}
				System.out.print("\n 变换后的向量c = 矩阵A * a   (红色的向量)\n");
				kaka.xx = kaka.x*a[0][0]+kaka.y*a[0][1]+kaka.z*a[0][2]; kaka.yy = kaka.x*a[1][0]+kaka.y*a[1][1]+kaka.z*a[1][2];	
				kaka.zz = kaka.x*a[2][0]+kaka.y*a[2][1]+kaka.z*a[2][2]; //向量变换后坐标
				System.out.print(" "  +kaka.xx );
				System.out.print(" , "  +kaka.yy ); 
				System.out.print(" , "  +kaka.zz ); 
				kaka.flag1 = kaka.flag3 = true ;
                                kaka.repaint();//画出变换后坐标
				System.out.print("\n输入放大倍数增加向量观察效果\n"  ); 

                                kaka.ample = sc.nextInt();
				kaka.flag2 = kaka.flag4 = true ;
                                kaka.repaint();
			}
}
